---
http_interactions:
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($username:String!) {\n  user(login: $username) {\n    pullRequests(states:
        OPEN last: 100) {\n      nodes {\n        id\n        title\n        body\n        url\n        createdAt\n        labels(first:
        100) {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","variables":{"username":"mkcode"}}'
    headers:
      User-Agent:
      - Faraday v0.12.2
      Authorization:
      - bearer 2495c12927057ce6b908a520bb2d7fb716b63b09
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 03 Sep 2019 16:13:02 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Server:
      - GitHub.com
      Status:
      - 200 OK
      Cache-Control:
      - no-cache
      X-Oauth-Scopes:
      - user:email
      X-Accepted-Oauth-Scopes:
      - repo
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4991'
      X-Ratelimit-Reset:
      - '1567530779'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval,
        X-GitHub-Media-Type
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding
      X-Github-Request-Id:
      - 3546:615E:3E059C:5A4770:5D6E910E
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"user":{"pullRequests":{"nodes":[{"id":"MDExOlB1bGxSZXF1ZXN0NTc5MDc4Mg==","title":"Upgraded
        to rails 3.2 stable","body":"Hi, I''m using this app as template for a new
        project. Wanted to get on rails 3.2 stable before I started. Here it is!\n\nCheers\n","url":"https://github.com/maccman/spine.rails3/pull/6","createdAt":"2013-05-17T23:05:41Z","labels":{"edges":[]}},{"id":"MDExOlB1bGxSZXF1ZXN0NDcxMDUxNzU=","title":"Delete
        repos cleanup","body":"@PeterDaveHello - Thanks for your contribution. I''m
        using this work as an opportunity to clean up how we are doing testing in
        this app. I see that you basically copied the format from the create_repos
        spec - which was a good move.\n\nAfter reworking this so I can understand
        what is happening in https://github.com/education/teachers_pet/commit/be8a8b1ddb3a8ef79a88f53f6bd05649417f0515,
        I notice that we are not stubbing any repo deletion requests - which then
        therefore would mean that these tests aren''t actually sending any API requests.\n\n@PeterDaveHello
        - these tests should be hitting a delete repo endpoint on the GitHub API,
        should they not? Can we rework them so that they do? These tests should fail
        in the case the we comment out the `teachers_pet(:delete_repos)`... block.\n\n/cc
        @johndbritton \n","url":"https://github.com/education/teachers_pet/pull/126","createdAt":"2015-10-08T02:24:19Z","labels":{"edges":[]}},{"id":"MDExOlB1bGxSZXF1ZXN0NDc0Nzk5ODQ=","title":"Results
        by cookie","body":"Hi @deski -  Following up on our discussion in #78 \n\nThis
        PR adds info from the peek cookie as discussed. It does not save Peek results
        unless the peek cookie is enabled. Always sets the cookie if peek is enabled.\n\nIn
        the case Peek was not enabled for a request, and is toggled on, `Peek::Views`
        with a `data-defer-to` are hidden and a refresh message is displayed: \n\n![screen
        shot 2015-10-12 at 8 41 31 pm](https://cloud.githubusercontent.com/assets/283496/10442611/22bb6a2e-7122-11e5-8fb3-c3fb5ed333b7.png)\n","url":"https://github.com/peek/peek/pull/79","createdAt":"2015-10-13T00:46:43Z","labels":{"edges":[]}},{"id":"MDExOlB1bGxSZXF1ZXN0NTE0MTg4ODg=","title":"Update
        README.md","body":"Add maintenance note to readme\n","url":"https://github.com/vulume/Cordova-DBCamera/pull/1","createdAt":"2015-11-20T22:49:53Z","labels":{"edges":[]}},{"id":"MDExOlB1bGxSZXF1ZXN0NjkyNjE4Mjk=","title":"Add
        natural layer","body":"Adds the beginnings of a prose layer.\n\nReplaces #5403
        according to the discussion in #5996.\n","url":"https://github.com/syl20bnr/spacemacs/pull/6012","createdAt":"2016-05-08T06:24:38Z","labels":{"edges":[{"node":{"name":"New
        Layer"}}]}},{"id":"MDExOlB1bGxSZXF1ZXN0OTA4ODAzMzQ=","title":"Coercion type
        systems","body":"Introducing switchable type coercion systems for Hashie.
        Follows up on #239.\n\nAdds ''dry-types'' and ''activemodel'' alongside Hashie''s
        builtin coercion system. Basic usage is written up in the README.\n\nFor the
        most part, reading the source should be straight forward. The ''coercion''
        folder under ''extensions'' contains the implementation of the 3 coercion
        systems. The `Hashie::Extensions::Coercion` module was split into two files.
        The file itself contains the interface and common coercion methods, while
        the `Coercion::HashieTypes` class now contains the actual coercion implementation.\n\nThe
        only confusing part is the `CoercionSystemIncludeBuilder` defined under `Hashie::Extensions::Coercion`.
        The purpose of this class is to DRY up the included hooks for `Hashie::Extensions::Coercion`
        and `Hashie::Extensions::Dash::Coercion`. The common includes are defined
        once, and reused in the default `included` method and the `active_model` and
        `dry_types` methods on both the default and Dash coercion classes. The `active_model`
        and `dry_types` methods on `Hashie::Extensions::Coercion` and `Hashie::Extensions::Dash::Coercion`
        both return an anonymous module with an `included` method correctly defined,
        which then is immediately executed because it then included. \n\nExample:
        \n\n``` ruby\nmod = Hashie::Extensions::Coercion.dry_types\n# => <Module:
        xyz>\n\nmod.methods\n#=> [:included]\n\nclass MyHash < Hashie::Hash\n  include
        mod\nend\n#=> Hashie::Extensions::Coercion::ClassMethods, Hashie::Extensions::Coercion::InstanceMethods,
        and Hashie::Extensions::Coercion::DryTypes are all mixed into MyHash\n```\n\nThis
        is 100% backwards compatible and all the tests pass. I did not add any additional
        tests - we should not need many as the new coercion systems are well tested
        in their own repos. We may want to add a few tests though.\n","url":"https://github.com/intridea/hashie/pull/379","createdAt":"2016-10-25T19:59:18Z","labels":{"edges":[{"node":{"name":"new
        feature"}}]}}]}}}}'
    http_version:
  recorded_at: Tue, 03 Sep 2019 16:13:02 GMT
recorded_with: VCR 5.0.0
